#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('datesbackend:server');
var http = require('http');
var jwt = require('jsonwebtoken');
var Message = require('../models/message');

var admin = require('firebase-admin');
// var serviceAccount = require('path/to/serviceAccountKey.json');

admin.initializeApp({
    credential: admin.credential.cert(JSON.parse(process.env.serviceAccountKey)),
    databaseURL: "https://dateabase-63e4d.firebaseio.com"
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Web socket server for chat
 */

const io = require('socket.io')(server);

// Authenticate
io.use((socket, next) => {
    let token = socket.handshake.query.token;
    if (token) {
        jwt.verify(token, app.get('secret'), function (err, decoded) {
            if (err) {
                return next(new Error('authentication error'));
            }
            next();
        });
    }
    return next(new Error('authentication error'));
});

io.on('connection', function (socket) {
    let id = socket.handshake.query.id;

    socket.on('join', function () {
        socket.join(id);
    });

    socket.on('message', function (data) {
        console.log(data);
        let message = new Message({
            toUserID: data.toUserID,
            fromUserID: data.fromUserID,
            matchID: data.matchID,
            chatID: data.chatID,
            createdAt: data.createdAt,
            text: data.text
        });

        message.save(function (err, message) {
            console.log(err);
            if (err) return null;
            else {
                socket.broadcast.to(id).emit('message', data.formattedMessage);

                let message = {
                    notification: {
                        title: 'Test',
                        body: 'ticles'
                    },
                    token: data.registrationToken
                };

                admin.messaging().send(message)
                    .then((response) => {
                        // Response is a message ID string.
                        console.log('Successfully sent message:', response);
                    })
                    .catch((error) => {
                        console.log('Error sending message:', error);
                    });
            }
        });
    });

    socket.on('disconnect', function () {
        console.log('client disconnect: ', id);
        socket.leave(id);
    });

    socket.on('error', function (err) {
        console.log('received error from client:', socket.id);
        console.log(err)
    })
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
